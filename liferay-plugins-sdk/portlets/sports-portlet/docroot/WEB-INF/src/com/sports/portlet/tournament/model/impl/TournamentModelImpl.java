/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.sports.portlet.tournament.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sports.portlet.tournament.model.Tournament;
import com.sports.portlet.tournament.model.TournamentModel;
import com.sports.portlet.tournament.model.TournamentSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Tournament service. Represents a row in the &quot;sports_tournament&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sports.portlet.tournament.model.TournamentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TournamentImpl}.
 * </p>
 *
 * @author vijayan.chendrayan
 * @see TournamentImpl
 * @see com.sports.portlet.tournament.model.Tournament
 * @see com.sports.portlet.tournament.model.TournamentModel
 * @generated
 */
@JSON(strict = true)
public class TournamentModelImpl extends BaseModelImpl<Tournament>
	implements TournamentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tournament model instance should use the {@link com.sports.portlet.tournament.model.Tournament} interface instead.
	 */
	public static final String TABLE_NAME = "sports_tournament";
	public static final Object[][] TABLE_COLUMNS = {
			{ "tournamentId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "createdBy", Types.BIGINT },
			{ "updatedBy", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "type_", Types.VARCHAR },
			{ "noOfTeams", Types.INTEGER },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "priceMoney", Types.VARCHAR },
			{ "location", Types.VARCHAR },
			{ "sponsors", Types.VARCHAR },
			{ "logo", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table sports_tournament (tournamentId LONG not null primary key IDENTITY,companyId LONG,groupId LONG,createdBy LONG,updatedBy LONG,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,type_ VARCHAR(75) null,noOfTeams INTEGER,startDate DATE null,endDate DATE null,priceMoney VARCHAR(75) null,location VARCHAR(75) null,sponsors VARCHAR(75) null,logo LONG)";
	public static final String TABLE_SQL_DROP = "drop table sports_tournament";
	public static final String ORDER_BY_JPQL = " ORDER BY tournament.modifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY sports_tournament.modifiedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sports.portlet.tournament.model.Tournament"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sports.portlet.tournament.model.Tournament"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Tournament toModel(TournamentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Tournament model = new TournamentImpl();

		model.setTournamentId(soapModel.getTournamentId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setUpdatedBy(soapModel.getUpdatedBy());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setType(soapModel.getType());
		model.setNoOfTeams(soapModel.getNoOfTeams());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setPriceMoney(soapModel.getPriceMoney());
		model.setLocation(soapModel.getLocation());
		model.setSponsors(soapModel.getSponsors());
		model.setLogo(soapModel.getLogo());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Tournament> toModels(TournamentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Tournament> models = new ArrayList<Tournament>(soapModels.length);

		for (TournamentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sports.portlet.tournament.model.Tournament"));

	public TournamentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tournamentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTournamentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tournamentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Tournament.class;
	}

	@Override
	public String getModelClassName() {
		return Tournament.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("tournamentId", getTournamentId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("type", getType());
		attributes.put("noOfTeams", getNoOfTeams());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("priceMoney", getPriceMoney());
		attributes.put("location", getLocation());
		attributes.put("sponsors", getSponsors());
		attributes.put("logo", getLogo());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long tournamentId = (Long)attributes.get("tournamentId");

		if (tournamentId != null) {
			setTournamentId(tournamentId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Long updatedBy = (Long)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		Integer noOfTeams = (Integer)attributes.get("noOfTeams");

		if (noOfTeams != null) {
			setNoOfTeams(noOfTeams);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		String priceMoney = (String)attributes.get("priceMoney");

		if (priceMoney != null) {
			setPriceMoney(priceMoney);
		}

		String location = (String)attributes.get("location");

		if (location != null) {
			setLocation(location);
		}

		String sponsors = (String)attributes.get("sponsors");

		if (sponsors != null) {
			setSponsors(sponsors);
		}

		Long logo = (Long)attributes.get("logo");

		if (logo != null) {
			setLogo(logo);
		}
	}

	@JSON
	@Override
	public long getTournamentId() {
		return _tournamentId;
	}

	@Override
	public void setTournamentId(long tournamentId) {
		_tournamentId = tournamentId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public long getUpdatedBy() {
		return _updatedBy;
	}

	@Override
	public void setUpdatedBy(long updatedBy) {
		_updatedBy = updatedBy;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@JSON
	@Override
	public int getNoOfTeams() {
		return _noOfTeams;
	}

	@Override
	public void setNoOfTeams(int noOfTeams) {
		_noOfTeams = noOfTeams;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@JSON
	@Override
	public String getPriceMoney() {
		if (_priceMoney == null) {
			return StringPool.BLANK;
		}
		else {
			return _priceMoney;
		}
	}

	@Override
	public void setPriceMoney(String priceMoney) {
		_priceMoney = priceMoney;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return StringPool.BLANK;
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		_location = location;
	}

	@JSON
	@Override
	public String getSponsors() {
		if (_sponsors == null) {
			return StringPool.BLANK;
		}
		else {
			return _sponsors;
		}
	}

	@Override
	public void setSponsors(String sponsors) {
		_sponsors = sponsors;
	}

	@JSON
	@Override
	public long getLogo() {
		return _logo;
	}

	@Override
	public void setLogo(long logo) {
		_logo = logo;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Tournament.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Tournament toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Tournament)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TournamentImpl tournamentImpl = new TournamentImpl();

		tournamentImpl.setTournamentId(getTournamentId());
		tournamentImpl.setCompanyId(getCompanyId());
		tournamentImpl.setGroupId(getGroupId());
		tournamentImpl.setCreatedBy(getCreatedBy());
		tournamentImpl.setUpdatedBy(getUpdatedBy());
		tournamentImpl.setCreateDate(getCreateDate());
		tournamentImpl.setModifiedDate(getModifiedDate());
		tournamentImpl.setName(getName());
		tournamentImpl.setType(getType());
		tournamentImpl.setNoOfTeams(getNoOfTeams());
		tournamentImpl.setStartDate(getStartDate());
		tournamentImpl.setEndDate(getEndDate());
		tournamentImpl.setPriceMoney(getPriceMoney());
		tournamentImpl.setLocation(getLocation());
		tournamentImpl.setSponsors(getSponsors());
		tournamentImpl.setLogo(getLogo());

		tournamentImpl.resetOriginalValues();

		return tournamentImpl;
	}

	@Override
	public int compareTo(Tournament tournament) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(),
				tournament.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Tournament)) {
			return false;
		}

		Tournament tournament = (Tournament)obj;

		long primaryKey = tournament.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Tournament> toCacheModel() {
		TournamentCacheModel tournamentCacheModel = new TournamentCacheModel();

		tournamentCacheModel.tournamentId = getTournamentId();

		tournamentCacheModel.companyId = getCompanyId();

		tournamentCacheModel.groupId = getGroupId();

		tournamentCacheModel.createdBy = getCreatedBy();

		tournamentCacheModel.updatedBy = getUpdatedBy();

		Date createDate = getCreateDate();

		if (createDate != null) {
			tournamentCacheModel.createDate = createDate.getTime();
		}
		else {
			tournamentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			tournamentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			tournamentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		tournamentCacheModel.name = getName();

		String name = tournamentCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			tournamentCacheModel.name = null;
		}

		tournamentCacheModel.type = getType();

		String type = tournamentCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			tournamentCacheModel.type = null;
		}

		tournamentCacheModel.noOfTeams = getNoOfTeams();

		Date startDate = getStartDate();

		if (startDate != null) {
			tournamentCacheModel.startDate = startDate.getTime();
		}
		else {
			tournamentCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			tournamentCacheModel.endDate = endDate.getTime();
		}
		else {
			tournamentCacheModel.endDate = Long.MIN_VALUE;
		}

		tournamentCacheModel.priceMoney = getPriceMoney();

		String priceMoney = tournamentCacheModel.priceMoney;

		if ((priceMoney != null) && (priceMoney.length() == 0)) {
			tournamentCacheModel.priceMoney = null;
		}

		tournamentCacheModel.location = getLocation();

		String location = tournamentCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			tournamentCacheModel.location = null;
		}

		tournamentCacheModel.sponsors = getSponsors();

		String sponsors = tournamentCacheModel.sponsors;

		if ((sponsors != null) && (sponsors.length() == 0)) {
			tournamentCacheModel.sponsors = null;
		}

		tournamentCacheModel.logo = getLogo();

		return tournamentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{tournamentId=");
		sb.append(getTournamentId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", noOfTeams=");
		sb.append(getNoOfTeams());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", priceMoney=");
		sb.append(getPriceMoney());
		sb.append(", location=");
		sb.append(getLocation());
		sb.append(", sponsors=");
		sb.append(getSponsors());
		sb.append(", logo=");
		sb.append(getLogo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.sports.portlet.tournament.model.Tournament");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>tournamentId</column-name><column-value><![CDATA[");
		sb.append(getTournamentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>noOfTeams</column-name><column-value><![CDATA[");
		sb.append(getNoOfTeams());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceMoney</column-name><column-value><![CDATA[");
		sb.append(getPriceMoney());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location</column-name><column-value><![CDATA[");
		sb.append(getLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sponsors</column-name><column-value><![CDATA[");
		sb.append(getSponsors());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>logo</column-name><column-value><![CDATA[");
		sb.append(getLogo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Tournament.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Tournament.class
		};
	private long _tournamentId;
	private long _companyId;
	private long _groupId;
	private long _createdBy;
	private long _updatedBy;
	private Date _createDate;
	private Date _modifiedDate;
	private String _name;
	private String _type;
	private int _noOfTeams;
	private Date _startDate;
	private Date _endDate;
	private String _priceMoney;
	private String _location;
	private String _sponsors;
	private long _logo;
	private Tournament _escapedModel;
}